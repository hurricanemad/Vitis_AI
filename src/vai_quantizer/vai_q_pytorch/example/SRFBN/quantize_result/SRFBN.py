# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class SRFBN(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(SRFBN, self).__init__()
        self.module_0 = py_nndct.nn.Input() #SRFBN::input_0(SRFBN::nndct_input_0)
        self.module_1 = py_nndct.nn.Conv2d(in_channels=3, out_channels=3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/MeanShift[sub_mean]/ret.3(SRFBN::nndct_conv2d_1)
        self.module_2 = py_nndct.nn.Interpolate() #SRFBN::SRFBN/ret.5(SRFBN::nndct_resize_2)
        self.module_3 = py_nndct.nn.Conv2d(in_channels=3, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/Sequential[conv_in]/Conv2d[0]/ret.7(SRFBN::nndct_conv2d_3)
        self.module_4 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/Sequential[conv_in]/PReLU[1]/ret.9(SRFBN::nndct_prelu_4)
        self.module_5 = py_nndct.nn.Conv2d(in_channels=128, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/Sequential[feat_in]/Conv2d[0]/ret.11(SRFBN::nndct_conv2d_5)
        self.module_6 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/Sequential[feat_in]/PReLU[1]/ret.13(SRFBN::nndct_prelu_6)
        self.module_7 = py_nndct.nn.Module('nndct_shape') #SRFBN::SRFBN/FeedbackBlock[block]/7391(SRFBN::nndct_shape_7)
        self.module_8 = py_nndct.nn.Module('nndct_shape') #SRFBN::SRFBN/FeedbackBlock[block]/7394(SRFBN::nndct_shape_8)
        self.module_9 = py_nndct.nn.Module('nndct_shape') #SRFBN::SRFBN/FeedbackBlock[block]/7397(SRFBN::nndct_shape_9)
        self.module_10 = py_nndct.nn.Module('nndct_shape') #SRFBN::SRFBN/FeedbackBlock[block]/7400(SRFBN::nndct_shape_10)
        self.module_11 = py_nndct.nn.Module('nndct_zeros') #SRFBN::SRFBN/FeedbackBlock[block]/7415(SRFBN::nndct_zeros_11)
        self.module_12 = py_nndct.nn.Module('nndct_cast') #SRFBN::SRFBN/FeedbackBlock[block]/7423(SRFBN::nndct_cast_12)
        self.module_13 = py_nndct.nn.Module('nndct_copy_') #SRFBN::SRFBN/FeedbackBlock[block]/ret.15(SRFBN::nndct_copy__13)
        self.module_14 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.17(SRFBN::nndct_concat_14)
        self.module_15 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_in]/Conv2d[0]/ret.19(SRFBN::nndct_conv2d_15)
        self.module_16 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_in]/PReLU[1]/ret.21(SRFBN::nndct_prelu_16)
        self.module_17 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.23(SRFBN::nndct_concat_17)
        self.module_18 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[0]/ConvTranspose2d[0]/ret.25(SRFBN::nndct_conv_transpose_2d_18)
        self.module_19 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[0]/PReLU[1]/ret.27(SRFBN::nndct_prelu_19)
        self.module_20 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.29(SRFBN::nndct_concat_20)
        self.module_21 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[0]/Conv2d[0]/ret.31(SRFBN::nndct_conv2d_21)
        self.module_22 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[0]/PReLU[1]/ret.33(SRFBN::nndct_prelu_22)
        self.module_23 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.35(SRFBN::nndct_concat_23)
        self.module_24 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[0]/Conv2d[0]/ret.37(SRFBN::nndct_conv2d_24)
        self.module_25 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[0]/PReLU[1]/ret.39(SRFBN::nndct_prelu_25)
        self.module_26 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[1]/ConvTranspose2d[0]/ret.41(SRFBN::nndct_conv_transpose_2d_26)
        self.module_27 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[1]/PReLU[1]/ret.43(SRFBN::nndct_prelu_27)
        self.module_28 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.45(SRFBN::nndct_concat_28)
        self.module_29 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[0]/Conv2d[0]/ret.47(SRFBN::nndct_conv2d_29)
        self.module_30 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[0]/PReLU[1]/ret.49(SRFBN::nndct_prelu_30)
        self.module_31 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[1]/Conv2d[0]/ret.51(SRFBN::nndct_conv2d_31)
        self.module_32 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[1]/PReLU[1]/ret.53(SRFBN::nndct_prelu_32)
        self.module_33 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.55(SRFBN::nndct_concat_33)
        self.module_34 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[1]/Conv2d[0]/ret.57(SRFBN::nndct_conv2d_34)
        self.module_35 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[1]/PReLU[1]/ret.59(SRFBN::nndct_prelu_35)
        self.module_36 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[2]/ConvTranspose2d[0]/ret.61(SRFBN::nndct_conv_transpose_2d_36)
        self.module_37 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[2]/PReLU[1]/ret.63(SRFBN::nndct_prelu_37)
        self.module_38 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.65(SRFBN::nndct_concat_38)
        self.module_39 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[1]/Conv2d[0]/ret.67(SRFBN::nndct_conv2d_39)
        self.module_40 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[1]/PReLU[1]/ret.69(SRFBN::nndct_prelu_40)
        self.module_41 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[2]/Conv2d[0]/ret.71(SRFBN::nndct_conv2d_41)
        self.module_42 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[2]/PReLU[1]/ret.73(SRFBN::nndct_prelu_42)
        self.module_43 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.75(SRFBN::nndct_concat_43)
        self.module_44 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_out]/Conv2d[0]/ret.77(SRFBN::nndct_conv2d_44)
        self.module_45 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_out]/PReLU[1]/ret.79(SRFBN::nndct_prelu_45)
        self.module_46 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/Sequential[out]/ConvTranspose2d[0]/ret.81(SRFBN::nndct_conv_transpose_2d_46)
        self.module_47 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/Sequential[out]/PReLU[1]/ret.83(SRFBN::nndct_prelu_47)
        self.module_48 = py_nndct.nn.Conv2d(in_channels=32, out_channels=3, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/Sequential[conv_out]/Conv2d[0]/ret.85(SRFBN::nndct_conv2d_48)
        self.module_49 = py_nndct.nn.Add() #SRFBN::SRFBN/ret.87(SRFBN::nndct_elemwise_add_49)
        self.module_50 = py_nndct.nn.Conv2d(in_channels=3, out_channels=3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/MeanShift[add_mean]/ret.89(SRFBN::nndct_conv2d_50)
        self.module_51 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.91(SRFBN::nndct_concat_51)
        self.module_52 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_in]/Conv2d[0]/ret.93(SRFBN::nndct_conv2d_52)
        self.module_53 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_in]/PReLU[1]/ret.95(SRFBN::nndct_prelu_53)
        self.module_54 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.97(SRFBN::nndct_concat_54)
        self.module_55 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[0]/ConvTranspose2d[0]/ret.99(SRFBN::nndct_conv_transpose_2d_55)
        self.module_56 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[0]/PReLU[1]/ret.101(SRFBN::nndct_prelu_56)
        self.module_57 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.103(SRFBN::nndct_concat_57)
        self.module_58 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[0]/Conv2d[0]/ret.105(SRFBN::nndct_conv2d_58)
        self.module_59 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[0]/PReLU[1]/ret.107(SRFBN::nndct_prelu_59)
        self.module_60 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.109(SRFBN::nndct_concat_60)
        self.module_61 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[0]/Conv2d[0]/ret.111(SRFBN::nndct_conv2d_61)
        self.module_62 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[0]/PReLU[1]/ret.113(SRFBN::nndct_prelu_62)
        self.module_63 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[1]/ConvTranspose2d[0]/ret.115(SRFBN::nndct_conv_transpose_2d_63)
        self.module_64 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[1]/PReLU[1]/ret.117(SRFBN::nndct_prelu_64)
        self.module_65 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.119(SRFBN::nndct_concat_65)
        self.module_66 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[0]/Conv2d[0]/ret.121(SRFBN::nndct_conv2d_66)
        self.module_67 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[0]/PReLU[1]/ret.123(SRFBN::nndct_prelu_67)
        self.module_68 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[1]/Conv2d[0]/ret.125(SRFBN::nndct_conv2d_68)
        self.module_69 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[1]/PReLU[1]/ret.127(SRFBN::nndct_prelu_69)
        self.module_70 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.129(SRFBN::nndct_concat_70)
        self.module_71 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[1]/Conv2d[0]/ret.131(SRFBN::nndct_conv2d_71)
        self.module_72 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[1]/PReLU[1]/ret.133(SRFBN::nndct_prelu_72)
        self.module_73 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[2]/ConvTranspose2d[0]/ret.135(SRFBN::nndct_conv_transpose_2d_73)
        self.module_74 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[2]/PReLU[1]/ret.137(SRFBN::nndct_prelu_74)
        self.module_75 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.139(SRFBN::nndct_concat_75)
        self.module_76 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[1]/Conv2d[0]/ret.141(SRFBN::nndct_conv2d_76)
        self.module_77 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[1]/PReLU[1]/ret.143(SRFBN::nndct_prelu_77)
        self.module_78 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[2]/Conv2d[0]/ret.145(SRFBN::nndct_conv2d_78)
        self.module_79 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[2]/PReLU[1]/ret.147(SRFBN::nndct_prelu_79)
        self.module_80 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.149(SRFBN::nndct_concat_80)
        self.module_81 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_out]/Conv2d[0]/ret.151(SRFBN::nndct_conv2d_81)
        self.module_82 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_out]/PReLU[1]/ret.153(SRFBN::nndct_prelu_82)
        self.module_83 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/Sequential[out]/ConvTranspose2d[0]/ret.155(SRFBN::nndct_conv_transpose_2d_83)
        self.module_84 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/Sequential[out]/PReLU[1]/ret.157(SRFBN::nndct_prelu_84)
        self.module_85 = py_nndct.nn.Conv2d(in_channels=32, out_channels=3, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/Sequential[conv_out]/Conv2d[0]/ret.159(SRFBN::nndct_conv2d_85)
        self.module_86 = py_nndct.nn.Add() #SRFBN::SRFBN/ret.161(SRFBN::nndct_elemwise_add_86)
        self.module_87 = py_nndct.nn.Conv2d(in_channels=3, out_channels=3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/MeanShift[add_mean]/ret.163(SRFBN::nndct_conv2d_87)
        self.module_88 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.165(SRFBN::nndct_concat_88)
        self.module_89 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_in]/Conv2d[0]/ret.167(SRFBN::nndct_conv2d_89)
        self.module_90 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_in]/PReLU[1]/ret.169(SRFBN::nndct_prelu_90)
        self.module_91 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.171(SRFBN::nndct_concat_91)
        self.module_92 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[0]/ConvTranspose2d[0]/ret.173(SRFBN::nndct_conv_transpose_2d_92)
        self.module_93 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[0]/PReLU[1]/ret.175(SRFBN::nndct_prelu_93)
        self.module_94 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.177(SRFBN::nndct_concat_94)
        self.module_95 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[0]/Conv2d[0]/ret.179(SRFBN::nndct_conv2d_95)
        self.module_96 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[0]/PReLU[1]/ret.181(SRFBN::nndct_prelu_96)
        self.module_97 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.183(SRFBN::nndct_concat_97)
        self.module_98 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[0]/Conv2d[0]/ret.185(SRFBN::nndct_conv2d_98)
        self.module_99 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[0]/PReLU[1]/ret.187(SRFBN::nndct_prelu_99)
        self.module_100 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[1]/ConvTranspose2d[0]/ret.189(SRFBN::nndct_conv_transpose_2d_100)
        self.module_101 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[1]/PReLU[1]/ret.191(SRFBN::nndct_prelu_101)
        self.module_102 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.193(SRFBN::nndct_concat_102)
        self.module_103 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[0]/Conv2d[0]/ret.195(SRFBN::nndct_conv2d_103)
        self.module_104 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[0]/PReLU[1]/ret.197(SRFBN::nndct_prelu_104)
        self.module_105 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[1]/Conv2d[0]/ret.199(SRFBN::nndct_conv2d_105)
        self.module_106 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[1]/PReLU[1]/ret.201(SRFBN::nndct_prelu_106)
        self.module_107 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.203(SRFBN::nndct_concat_107)
        self.module_108 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[1]/Conv2d[0]/ret.205(SRFBN::nndct_conv2d_108)
        self.module_109 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[1]/PReLU[1]/ret.207(SRFBN::nndct_prelu_109)
        self.module_110 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[2]/ConvTranspose2d[0]/ret.209(SRFBN::nndct_conv_transpose_2d_110)
        self.module_111 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[2]/PReLU[1]/ret.211(SRFBN::nndct_prelu_111)
        self.module_112 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.213(SRFBN::nndct_concat_112)
        self.module_113 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[1]/Conv2d[0]/ret.215(SRFBN::nndct_conv2d_113)
        self.module_114 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[1]/PReLU[1]/ret.217(SRFBN::nndct_prelu_114)
        self.module_115 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[2]/Conv2d[0]/ret.219(SRFBN::nndct_conv2d_115)
        self.module_116 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[2]/PReLU[1]/ret.221(SRFBN::nndct_prelu_116)
        self.module_117 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.223(SRFBN::nndct_concat_117)
        self.module_118 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_out]/Conv2d[0]/ret.225(SRFBN::nndct_conv2d_118)
        self.module_119 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_out]/PReLU[1]/ret.227(SRFBN::nndct_prelu_119)
        self.module_120 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/Sequential[out]/ConvTranspose2d[0]/ret.229(SRFBN::nndct_conv_transpose_2d_120)
        self.module_121 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/Sequential[out]/PReLU[1]/ret.231(SRFBN::nndct_prelu_121)
        self.module_122 = py_nndct.nn.Conv2d(in_channels=32, out_channels=3, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/Sequential[conv_out]/Conv2d[0]/ret.233(SRFBN::nndct_conv2d_122)
        self.module_123 = py_nndct.nn.Add() #SRFBN::SRFBN/ret.235(SRFBN::nndct_elemwise_add_123)
        self.module_124 = py_nndct.nn.Conv2d(in_channels=3, out_channels=3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/MeanShift[add_mean]/ret.237(SRFBN::nndct_conv2d_124)
        self.module_125 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.239(SRFBN::nndct_concat_125)
        self.module_126 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_in]/Conv2d[0]/ret.241(SRFBN::nndct_conv2d_126)
        self.module_127 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_in]/PReLU[1]/ret.243(SRFBN::nndct_prelu_127)
        self.module_128 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.245(SRFBN::nndct_concat_128)
        self.module_129 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[0]/ConvTranspose2d[0]/ret.247(SRFBN::nndct_conv_transpose_2d_129)
        self.module_130 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[0]/PReLU[1]/ret.249(SRFBN::nndct_prelu_130)
        self.module_131 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.251(SRFBN::nndct_concat_131)
        self.module_132 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[0]/Conv2d[0]/ret.253(SRFBN::nndct_conv2d_132)
        self.module_133 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[0]/PReLU[1]/ret.255(SRFBN::nndct_prelu_133)
        self.module_134 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.257(SRFBN::nndct_concat_134)
        self.module_135 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[0]/Conv2d[0]/ret.259(SRFBN::nndct_conv2d_135)
        self.module_136 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[0]/PReLU[1]/ret.261(SRFBN::nndct_prelu_136)
        self.module_137 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[1]/ConvTranspose2d[0]/ret.263(SRFBN::nndct_conv_transpose_2d_137)
        self.module_138 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[1]/PReLU[1]/ret.265(SRFBN::nndct_prelu_138)
        self.module_139 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.267(SRFBN::nndct_concat_139)
        self.module_140 = py_nndct.nn.Conv2d(in_channels=64, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[0]/Conv2d[0]/ret.269(SRFBN::nndct_conv2d_140)
        self.module_141 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[0]/PReLU[1]/ret.271(SRFBN::nndct_prelu_141)
        self.module_142 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[1]/Conv2d[0]/ret.273(SRFBN::nndct_conv2d_142)
        self.module_143 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[1]/PReLU[1]/ret.275(SRFBN::nndct_prelu_143)
        self.module_144 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.277(SRFBN::nndct_concat_144)
        self.module_145 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[1]/Conv2d[0]/ret.279(SRFBN::nndct_conv2d_145)
        self.module_146 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[uptranBlocks]/ModuleList[1]/PReLU[1]/ret.281(SRFBN::nndct_prelu_146)
        self.module_147 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[2]/ConvTranspose2d[0]/ret.283(SRFBN::nndct_conv_transpose_2d_147)
        self.module_148 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[upBlocks]/ModuleList[2]/PReLU[1]/ret.285(SRFBN::nndct_prelu_148)
        self.module_149 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.287(SRFBN::nndct_concat_149)
        self.module_150 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[1]/Conv2d[0]/ret.289(SRFBN::nndct_conv2d_150)
        self.module_151 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downtranBlocks]/ModuleList[1]/PReLU[1]/ret.291(SRFBN::nndct_prelu_151)
        self.module_152 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[2]/Conv2d[0]/ret.293(SRFBN::nndct_conv2d_152)
        self.module_153 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[downBlocks]/ModuleList[2]/PReLU[1]/ret.295(SRFBN::nndct_prelu_153)
        self.module_154 = py_nndct.nn.Cat() #SRFBN::SRFBN/FeedbackBlock[block]/ret.297(SRFBN::nndct_concat_154)
        self.module_155 = py_nndct.nn.Conv2d(in_channels=96, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_out]/Conv2d[0]/ret.299(SRFBN::nndct_conv2d_155)
        self.module_156 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/FeedbackBlock[block]/Sequential[compress_out]/PReLU[1]/ret.301(SRFBN::nndct_prelu_156)
        self.module_157 = py_nndct.nn.ConvTranspose2d(in_channels=32, out_channels=32, kernel_size=[6, 6], stride=[2, 2], padding=[2, 2], output_padding=[0, 0], groups=1, bias=True, dilation=[1, 1]) #SRFBN::SRFBN/Sequential[out]/ConvTranspose2d[0]/ret.303(SRFBN::nndct_conv_transpose_2d_157)
        self.module_158 = py_nndct.nn.PReLU(num_parameters=1, init=0.25) #SRFBN::SRFBN/Sequential[out]/PReLU[1]/ret.305(SRFBN::nndct_prelu_158)
        self.module_159 = py_nndct.nn.Conv2d(in_channels=32, out_channels=3, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/Sequential[conv_out]/Conv2d[0]/ret.307(SRFBN::nndct_conv2d_159)
        self.module_160 = py_nndct.nn.Add() #SRFBN::SRFBN/ret.309(SRFBN::nndct_elemwise_add_160)
        self.module_161 = py_nndct.nn.Conv2d(in_channels=3, out_channels=3, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #SRFBN::SRFBN/MeanShift[add_mean]/ret(SRFBN::nndct_conv2d_161)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_0 = self.module_1(output_module_0)
        output_module_2 = self.module_2(input=output_module_0, size=None, scale_factor=[2.0,2.0], mode='bilinear', align_corners=False)
        output_module_3 = self.module_3(output_module_0)
        output_module_3 = self.module_4(output_module_3)
        output_module_3 = self.module_5(output_module_3)
        output_module_3 = self.module_6(output_module_3)
        output_module_7 = self.module_7(input=output_module_3, dim=0)
        output_module_8 = self.module_8(input=output_module_3, dim=1)
        output_module_9 = self.module_9(input=output_module_3, dim=2)
        output_module_10 = self.module_10(input=output_module_3, dim=3)
        output_module_7 = self.module_11(size=[output_module_7,output_module_8,output_module_9,output_module_10], dtype=torch.float, device='cpu')
        output_module_7 = self.module_12(input=output_module_7, dtype=torch.float, device='cpu', non_blocking=False, copy=False)
        output_module_7 = self.module_13(input=output_module_7, other=output_module_3, non_blocking=False)
        output_module_14 = self.module_14(dim=1, tensors=[output_module_3,output_module_7])
        output_module_14 = self.module_15(output_module_14)
        output_module_14 = self.module_16(output_module_14)
        output_module_17 = self.module_17(dim=1, tensors=[output_module_14])
        output_module_17 = self.module_18(output_module_17)
        output_module_17 = self.module_19(output_module_17)
        output_module_20 = self.module_20(dim=1, tensors=[output_module_17])
        output_module_20 = self.module_21(output_module_20)
        output_module_20 = self.module_22(output_module_20)
        output_module_23 = self.module_23(dim=1, tensors=[output_module_14,output_module_20])
        output_module_23 = self.module_24(output_module_23)
        output_module_23 = self.module_25(output_module_23)
        output_module_23 = self.module_26(output_module_23)
        output_module_23 = self.module_27(output_module_23)
        output_module_28 = self.module_28(dim=1, tensors=[output_module_17,output_module_23])
        output_module_28 = self.module_29(output_module_28)
        output_module_28 = self.module_30(output_module_28)
        output_module_28 = self.module_31(output_module_28)
        output_module_28 = self.module_32(output_module_28)
        output_module_33 = self.module_33(dim=1, tensors=[output_module_14,output_module_20,output_module_28])
        output_module_33 = self.module_34(output_module_33)
        output_module_33 = self.module_35(output_module_33)
        output_module_33 = self.module_36(output_module_33)
        output_module_33 = self.module_37(output_module_33)
        output_module_38 = self.module_38(dim=1, tensors=[output_module_17,output_module_23,output_module_33])
        output_module_38 = self.module_39(output_module_38)
        output_module_38 = self.module_40(output_module_38)
        output_module_38 = self.module_41(output_module_38)
        output_module_38 = self.module_42(output_module_38)
        output_module_43 = self.module_43(dim=1, tensors=[output_module_20,output_module_28,output_module_38])
        output_module_43 = self.module_44(output_module_43)
        output_module_43 = self.module_45(output_module_43)
        output_module_46 = self.module_46(output_module_43)
        output_module_46 = self.module_47(output_module_46)
        output_module_46 = self.module_48(output_module_46)
        output_module_49 = self.module_49(input=output_module_2, other=output_module_46, alpha=1)
        output_module_49 = self.module_50(output_module_49)
        output_module_51 = self.module_51(dim=1, tensors=[output_module_3,output_module_43])
        output_module_51 = self.module_52(output_module_51)
        output_module_51 = self.module_53(output_module_51)
        output_module_54 = self.module_54(dim=1, tensors=[output_module_51])
        output_module_54 = self.module_55(output_module_54)
        output_module_54 = self.module_56(output_module_54)
        output_module_57 = self.module_57(dim=1, tensors=[output_module_54])
        output_module_57 = self.module_58(output_module_57)
        output_module_57 = self.module_59(output_module_57)
        output_module_60 = self.module_60(dim=1, tensors=[output_module_51,output_module_57])
        output_module_60 = self.module_61(output_module_60)
        output_module_60 = self.module_62(output_module_60)
        output_module_60 = self.module_63(output_module_60)
        output_module_60 = self.module_64(output_module_60)
        output_module_65 = self.module_65(dim=1, tensors=[output_module_54,output_module_60])
        output_module_65 = self.module_66(output_module_65)
        output_module_65 = self.module_67(output_module_65)
        output_module_65 = self.module_68(output_module_65)
        output_module_65 = self.module_69(output_module_65)
        output_module_70 = self.module_70(dim=1, tensors=[output_module_51,output_module_57,output_module_65])
        output_module_70 = self.module_71(output_module_70)
        output_module_70 = self.module_72(output_module_70)
        output_module_70 = self.module_73(output_module_70)
        output_module_70 = self.module_74(output_module_70)
        output_module_75 = self.module_75(dim=1, tensors=[output_module_54,output_module_60,output_module_70])
        output_module_75 = self.module_76(output_module_75)
        output_module_75 = self.module_77(output_module_75)
        output_module_75 = self.module_78(output_module_75)
        output_module_75 = self.module_79(output_module_75)
        output_module_80 = self.module_80(dim=1, tensors=[output_module_57,output_module_65,output_module_75])
        output_module_80 = self.module_81(output_module_80)
        output_module_80 = self.module_82(output_module_80)
        output_module_83 = self.module_83(output_module_80)
        output_module_83 = self.module_84(output_module_83)
        output_module_83 = self.module_85(output_module_83)
        output_module_86 = self.module_86(input=output_module_2, other=output_module_83, alpha=1)
        output_module_86 = self.module_87(output_module_86)
        output_module_88 = self.module_88(dim=1, tensors=[output_module_3,output_module_80])
        output_module_88 = self.module_89(output_module_88)
        output_module_88 = self.module_90(output_module_88)
        output_module_91 = self.module_91(dim=1, tensors=[output_module_88])
        output_module_91 = self.module_92(output_module_91)
        output_module_91 = self.module_93(output_module_91)
        output_module_94 = self.module_94(dim=1, tensors=[output_module_91])
        output_module_94 = self.module_95(output_module_94)
        output_module_94 = self.module_96(output_module_94)
        output_module_97 = self.module_97(dim=1, tensors=[output_module_88,output_module_94])
        output_module_97 = self.module_98(output_module_97)
        output_module_97 = self.module_99(output_module_97)
        output_module_97 = self.module_100(output_module_97)
        output_module_97 = self.module_101(output_module_97)
        output_module_102 = self.module_102(dim=1, tensors=[output_module_91,output_module_97])
        output_module_102 = self.module_103(output_module_102)
        output_module_102 = self.module_104(output_module_102)
        output_module_102 = self.module_105(output_module_102)
        output_module_102 = self.module_106(output_module_102)
        output_module_107 = self.module_107(dim=1, tensors=[output_module_88,output_module_94,output_module_102])
        output_module_107 = self.module_108(output_module_107)
        output_module_107 = self.module_109(output_module_107)
        output_module_107 = self.module_110(output_module_107)
        output_module_107 = self.module_111(output_module_107)
        output_module_112 = self.module_112(dim=1, tensors=[output_module_91,output_module_97,output_module_107])
        output_module_112 = self.module_113(output_module_112)
        output_module_112 = self.module_114(output_module_112)
        output_module_112 = self.module_115(output_module_112)
        output_module_112 = self.module_116(output_module_112)
        output_module_117 = self.module_117(dim=1, tensors=[output_module_94,output_module_102,output_module_112])
        output_module_117 = self.module_118(output_module_117)
        output_module_117 = self.module_119(output_module_117)
        output_module_120 = self.module_120(output_module_117)
        output_module_120 = self.module_121(output_module_120)
        output_module_120 = self.module_122(output_module_120)
        output_module_123 = self.module_123(input=output_module_2, other=output_module_120, alpha=1)
        output_module_123 = self.module_124(output_module_123)
        output_module_125 = self.module_125(dim=1, tensors=[output_module_3,output_module_117])
        output_module_125 = self.module_126(output_module_125)
        output_module_125 = self.module_127(output_module_125)
        output_module_128 = self.module_128(dim=1, tensors=[output_module_125])
        output_module_128 = self.module_129(output_module_128)
        output_module_128 = self.module_130(output_module_128)
        output_module_131 = self.module_131(dim=1, tensors=[output_module_128])
        output_module_131 = self.module_132(output_module_131)
        output_module_131 = self.module_133(output_module_131)
        output_module_134 = self.module_134(dim=1, tensors=[output_module_125,output_module_131])
        output_module_134 = self.module_135(output_module_134)
        output_module_134 = self.module_136(output_module_134)
        output_module_134 = self.module_137(output_module_134)
        output_module_134 = self.module_138(output_module_134)
        output_module_139 = self.module_139(dim=1, tensors=[output_module_128,output_module_134])
        output_module_139 = self.module_140(output_module_139)
        output_module_139 = self.module_141(output_module_139)
        output_module_139 = self.module_142(output_module_139)
        output_module_139 = self.module_143(output_module_139)
        output_module_144 = self.module_144(dim=1, tensors=[output_module_125,output_module_131,output_module_139])
        output_module_144 = self.module_145(output_module_144)
        output_module_144 = self.module_146(output_module_144)
        output_module_144 = self.module_147(output_module_144)
        output_module_144 = self.module_148(output_module_144)
        output_module_149 = self.module_149(dim=1, tensors=[output_module_128,output_module_134,output_module_144])
        output_module_149 = self.module_150(output_module_149)
        output_module_149 = self.module_151(output_module_149)
        output_module_149 = self.module_152(output_module_149)
        output_module_149 = self.module_153(output_module_149)
        output_module_154 = self.module_154(dim=1, tensors=[output_module_131,output_module_139,output_module_149])
        output_module_154 = self.module_155(output_module_154)
        output_module_154 = self.module_156(output_module_154)
        output_module_154 = self.module_157(output_module_154)
        output_module_154 = self.module_158(output_module_154)
        output_module_154 = self.module_159(output_module_154)
        output_module_160 = self.module_160(input=output_module_2, other=output_module_154, alpha=1)
        output_module_160 = self.module_161(output_module_160)
        return (output_module_49,output_module_86,output_module_123,output_module_160)
